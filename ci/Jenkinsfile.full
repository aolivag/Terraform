pipeline {
    agent any
    
    environment {
        // Definir variables de entorno para el pipeline
        TERRAFORM_HOME = tool 'terraform'
        PATH = "${env.TERRAFORM_HOME};${env.PATH}"  // Separador de ruta en Windows es punto y coma
    }
    
    parameters {
        choice(name: 'TERRAFORM_ACTION', choices: ['plan', 'apply', 'destroy', 'validate'], description: 'Acción a ejecutar en Terraform')
        string(name: 'CONTAINER_NAME', defaultValue: 'terraform-docker-demo', description: 'Nombre del contenedor Docker')
        string(name: 'EXTERNAL_PORT', defaultValue: '8000', description: 'Puerto externo para mapear al contenedor')
        string(name: 'IMAGE_NAME', defaultValue: 'nginx:latest', description: 'Nombre de la imagen Docker a utilizar')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'prod', 'qa', 'stage'], description: 'Entorno a desplegar')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Omitir pruebas (no recomendado)')
        booleanParam(name: 'FORCE_DESTROY', defaultValue: false, description: 'Forzar destrucción sin confirmación (solo con destroy)')
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Obtener el código del repositorio
                checkout scm
            }
        }
        
        stage('Load Config') {
            steps {
                script {
                    // Cargar archivo de configuración si existe
                    if (fileExists('ci/jenkins.config')) {
                        def props = readProperties file: 'ci/jenkins.config'
                        echo "Configuración cargada: ${props}"
                    } else {
                        echo "Archivo de configuración no encontrado, usando valores predeterminados"
                    }
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                script {
                    // Mostrar información del entorno
                    echo "Desplegando en ambiente: ${params.ENVIRONMENT}"
                    echo "Docker container: ${params.CONTAINER_NAME}"
                    echo "Acción de Terraform: ${params.TERRAFORM_ACTION}"
                    
                    // Verificar Terraform
                    bat 'terraform --version'
                }
            }
        }
        
        stage('Terraform Init') {
            steps {
                dir("environments/${params.ENVIRONMENT}") {
                    bat 'terraform init'
                }
            }
        }
        
        stage('Terraform Format') {
            steps {
                dir("environments/${params.ENVIRONMENT}") {
                    bat 'terraform fmt -check'
                }
            }
        }
        
        stage('Terraform Validate') {
            steps {
                dir("environments/${params.ENVIRONMENT}") {
                    bat 'terraform validate'
                }
            }
        }
        
        stage('Run Tests') {
            when {
                expression { return !params.SKIP_TESTS }
            }
            steps {
                echo "Ejecutando pruebas en la configuración..."
                script {
                    // Aquí se podrían añadir pruebas adicionales
                    dir("environments/${params.ENVIRONMENT}") {
                        try {
                            bat 'terraform validate -json > validate_result.json'
                            def validateResult = readFile 'validate_result.json'
                            echo "Resultado de validación: ${validateResult}"
                        } catch (Exception e) {
                            echo "Error en las pruebas: ${e.message}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
        
        stage('Terraform Plan') {
            when {
                expression { params.TERRAFORM_ACTION == 'plan' || params.TERRAFORM_ACTION == 'apply' }
            }
            steps {
                dir("environments/${params.ENVIRONMENT}") {
                    bat """
                    terraform plan -out=tfplan ^
                        -var="container_name=${params.CONTAINER_NAME}" ^
                        -var="external_port=${params.EXTERNAL_PORT}" ^
                        -var="image_name=${params.IMAGE_NAME}" ^
                        -detailed-exitcode
                    """
                }
            }
        }
        
        stage('Terraform Apply') {
            when {
                expression { params.TERRAFORM_ACTION == 'apply' }
            }
            steps {
                dir("environments/${params.ENVIRONMENT}") {
                    bat 'terraform apply -auto-approve tfplan'
                }
            }
            post {
                success {
                    echo "Despliegue completado con éxito en ${params.ENVIRONMENT}"
                    
                    // Guardar información del estado como artefacto
                    script {
                        bat "terraform show -json > terraform_state_${params.ENVIRONMENT}.json"
                        archiveArtifacts artifacts: "terraform_state_${params.ENVIRONMENT}.json", allowEmptyArchive: true
                    }
                }
            }
        }
        
        stage('Terraform Destroy') {
            when {
                expression { params.TERRAFORM_ACTION == 'destroy' }
            }
            steps {
                script {
                    if (params.FORCE_DESTROY || env.BRANCH_NAME == 'develop') {
                        dir("environments/${params.ENVIRONMENT}") {
                            bat """
                            terraform destroy -auto-approve ^
                                -var="container_name=${params.CONTAINER_NAME}" ^
                                -var="external_port=${params.EXTERNAL_PORT}" ^
                                -var="image_name=${params.IMAGE_NAME}"
                            """
                        }
                    } else {
                        // Solicitar confirmación manual
                        input message: "¿Estás seguro de que deseas destruir la infraestructura en ${params.ENVIRONMENT}?", ok: 'Sí, destruir'
                        
                        dir("environments/${params.ENVIRONMENT}") {
                            bat """
                            terraform destroy -auto-approve ^
                                -var="container_name=${params.CONTAINER_NAME}" ^
                                -var="external_port=${params.EXTERNAL_PORT}" ^
                                -var="image_name=${params.IMAGE_NAME}"
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Limpiar el espacio de trabajo, excepto los archivos de estado de Terraform
            cleanWs(patterns: [[pattern: 'environments/**/terraform.tfstate*', type: 'EXCLUDE']])
        }
        success {
            echo 'Pipeline ejecutado correctamente'
        }
        failure {
            echo 'Pipeline fallido'
        }
    }
}
