pipeline {
    // Usar el agente estándar de Jenkins en lugar de Docker
    agent any
    
    environment {
        // Definir variables de entorno para el pipeline
        TERRAFORM_HOME = tool 'terraform'
        PATH = "${env.TERRAFORM_HOME};${env.PATH}"  // Separador de ruta en Windows es punto y coma
    }
    
    parameters {
        choice(name: 'TERRAFORM_ACTION', choices: ['plan', 'apply', 'destroy'], description: 'Acción a ejecutar en Terraform')
        string(name: 'CONTAINER_NAME', defaultValue: 'terraform-docker-demo', description: 'Nombre del contenedor Docker')
        string(name: 'EXTERNAL_PORT', defaultValue: '8000', description: 'Puerto externo para mapear al contenedor')
        string(name: 'IMAGE_NAME', defaultValue: 'nginx:latest', description: 'Nombre de la imagen Docker a utilizar')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }        stage('Terraform Init') {
            steps {
                dir('environments/dev') {
                    bat 'terraform init'
                }
            }
        }
        
        stage('Terraform Validate') {
            steps {
                dir('environments/dev') {
                    bat 'terraform validate'
                }
            }
        }          stage('Terraform Plan') {
            steps {
                dir('environments/dev') {
                    bat """
                    terraform plan -out=tfplan ^
                        -var="container_name=${params.CONTAINER_NAME}" ^
                        -var="external_port=${params.EXTERNAL_PORT}" ^
                        -var="image_name=${params.IMAGE_NAME}"
                    """
                }
            }
        }
          stage('Terraform Apply/Destroy') {
            when {
                expression { params.TERRAFORM_ACTION == 'apply' || params.TERRAFORM_ACTION == 'destroy' }
            }
            steps {                script {
                    dir('environments/dev') {
                        if (params.TERRAFORM_ACTION == 'apply') {
                            bat 'terraform apply -auto-approve tfplan'
                        } else if (params.TERRAFORM_ACTION == 'destroy') {
                            bat """
                            terraform destroy -auto-approve ^
                                -var="container_name=${params.CONTAINER_NAME}" ^
                                -var="external_port=${params.EXTERNAL_PORT}" ^
                                -var="image_name=${params.IMAGE_NAME}"
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'tfplan', allowEmptyArchive: true
            cleanWs()
        }
    }
}
